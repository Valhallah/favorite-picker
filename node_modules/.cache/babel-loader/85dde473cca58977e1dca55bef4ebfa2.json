{"ast":null,"code":"var _jsxFileName = \"/home/valynhall/code/flexera-assessment-app/my-app/src/components/RepoPicker.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 600\n  },\n  h6: {\n    fontSize: 14\n  },\n  description: {\n    fontSize: 14,\n    width: 50\n  },\n  image: {\n    width: 50\n  },\n  clearButton: {\n    float: \"right\"\n  }\n});\n\nfunction createData(avatar_url, full_name, description) {\n  return {\n    avatar_url,\n    full_name,\n    description\n  };\n}\n\nfunction RepoPicker(props) {\n  const [checked, setChecked] = useState([]);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [page, setPage] = React.useState(0);\n  const classes = useStyles();\n  const data = props.data;\n\n  const handleChange = event => {\n    window.localStorage.setItem(event.target.id, JSON.stringify(event.target.checked));\n    setChecked({ ...checked,\n      [event.target.id]: event.target.checked\n    });\n  };\n\n  useEffect(() => {//run after checked state is updated\n  }, [checked]); //added clear storage handler to clear local storage and checked boxes if the user wishes\n\n  const handleClear = () => {\n    localStorage.clear();\n    setChecked([]);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  }; //work around for async call with hooks\n\n\n  if (data != null && data.items != null) {\n    const rows = data.items.map(item => createData(item.owner.avatar_url, item.full_name, item.description));\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, \"Repo Picker\"), /*#__PURE__*/React.createElement(TableContainer, {\n      component: Paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      size: \"small\",\n      className: classes.table,\n      \"aria-label\": \"simple table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 15\n      }\n    }, \"Avatar\"), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, \"Name\"), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, \"Description\"), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: handleClear,\n      className: classes.clearButton,\n      variant: \"contained\",\n      color: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 19\n      }\n    }, \"Clear\")))), /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => /*#__PURE__*/React.createElement(TableRow, {\n      key: row.full_name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      align: \"center\",\n      component: \"th\",\n      scope: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      alt: \"avatar\",\n      className: classes.image,\n      src: row.avatar_url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"center\",\n      component: \"th\",\n      scope: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      className: classes.h6,\n      variant: \"h6\",\n      component: \"span\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, row.full_name)), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"center\",\n      component: \"th\",\n      scope: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      className: classes.description,\n      variant: \"h6\",\n      component: \"span\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 19\n      }\n    }, row.description)), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"center\",\n      component: \"th\",\n      scope: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      id: row.full_name,\n      checked: window.localStorage.getItem(row.full_name) === 'true',\n      onChange: handleChange,\n      inputProps: {\n        'aria-label': 'primary checkbox'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }\n    })))), emptyRows > 0 && /*#__PURE__*/React.createElement(TableRow, {\n      style: {\n        height: 48 * emptyRows\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      colSpan: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 15\n      }\n    }))))), /*#__PURE__*/React.createElement(TablePagination, {\n      rowsPerPageOptions: [10],\n      component: \"div\",\n      count: rows.length,\n      rowsPerPage: rowsPerPage,\n      page: page,\n      onChangePage: handleChangePage,\n      onChangeRowsPerPage: handleChangeRowsPerPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  return null;\n}\n\nexport default RepoPicker;","map":{"version":3,"sources":["/home/valynhall/code/flexera-assessment-app/my-app/src/components/RepoPicker.tsx"],"names":["React","useState","useEffect","Typography","Table","TableBody","TableCell","Checkbox","TableContainer","TableHead","TableRow","TablePagination","Paper","Button","makeStyles","useStyles","table","minWidth","h6","fontSize","description","width","image","clearButton","float","createData","avatar_url","full_name","RepoPicker","props","checked","setChecked","rowsPerPage","setRowsPerPage","page","setPage","classes","data","handleChange","event","window","localStorage","setItem","target","id","JSON","stringify","handleClear","clear","handleChangePage","newPage","handleChangeRowsPerPage","parseInt","value","items","rows","map","item","owner","emptyRows","Math","min","length","slice","row","getItem","height"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 600,\n  },\n  h6:{\n    fontSize: 14,\n  },\n  description:{\n    fontSize: 14,\n    width: 50,\n  },\n  image: {\n    width: 50,\n  },\n  clearButton: {\n    float: \"right\",\n  }\n});\n\ninterface IDataProps {\n    data: any;\n    full_name: string;\n    avatar_url: string;\n    description: string;\n}\n\nfunction createData(avatar_url: string, full_name: string, description: string) {\n  return {avatar_url, full_name, description };\n}\n\n\nfunction RepoPicker(props: IDataProps) {\n  const [checked, setChecked] = useState([]);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [page, setPage] = React.useState(0);\n  const classes = useStyles();\n  const data =  props.data;\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    window.localStorage.setItem(event.target.id, JSON.stringify(event.target.checked));\n    setChecked({...checked, [event.target.id] : event.target.checked });\n  }\n\n  useEffect(() => {\n    //run after checked state is updated\n   }, [checked])\n\n   //added clear storage handler to clear local storage and checked boxes if the user wishes\n  const handleClear = () => {\n    localStorage.clear()\n    setChecked([]);\n  }\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n \n  //work around for async call with hooks\n  if(data != null && data.items != null) {\n    const rows =  data.items.map((item: any) => (\n      createData(item.owner.avatar_url, item.full_name, item.description)\n    ))\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n    return (\n      <div className=\"App\">\n        <Typography variant=\"h4\">Repo Picker</Typography>\n          <TableContainer component={Paper}>\n          <Table size=\"small\" className={classes.table} aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n              <TableCell align=\"center\">Avatar</TableCell>\n                <TableCell align=\"center\">Name</TableCell>\n                <TableCell align=\"center\">Description</TableCell>\n                <TableCell align=\"center\"> \n                  <Button onClick={handleClear} className={classes.clearButton} variant=\"contained\" color=\"secondary\">\n                      Clear\n                  </Button>\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row: any) => (\n              <TableRow key={row.full_name}>\n                <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                <img alt=\"avatar\" className={classes.image} src={row.avatar_url}/>\n                </TableCell>\n              \n                <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                <Typography className={classes.h6} variant=\"h6\" component=\"span\">\n                  {row.full_name}\n                  </Typography>\n                </TableCell>\n                \n                <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                  <Typography className={classes.description} variant=\"h6\" component=\"span\">\n                    {row.description}\n                    </Typography>\n                  </TableCell>\n                  <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                    <Checkbox\n                      id={row.full_name}\n                      checked={window.localStorage.getItem(row.full_name) === 'true'}\n                      onChange={handleChange}\n                      inputProps={{ 'aria-label': 'primary checkbox' }}\n                    />\n                </TableCell>\n              </TableRow>\n            ))}\n            {emptyRows > 0 && (\n            <TableRow style={{ height: 48 * emptyRows }}>\n              <TableCell colSpan={6} />\n            </TableRow>\n          )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n          rowsPerPageOptions={[10]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </div>\n    );\n  }\n  return null;\n}\n\nexport default RepoPicker;\n"]},"metadata":{},"sourceType":"module"}