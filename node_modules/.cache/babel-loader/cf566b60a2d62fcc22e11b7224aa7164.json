{"ast":null,"code":"var _jsxFileName = \"/home/valynhall/code/flexera-assessment-app/my-app/src/components/RepoTable.tsx\";\nimport React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650\n  },\n  h6: {\n    fontSize: 14\n  }\n});\n\nfunction createData(full_name, description) {\n  return {\n    full_name,\n    description\n  };\n}\n\nfunction RepoTable(props) {\n  console.log(props.full_name);\n  let initialValue = window.localStorage.getItem('checked' || 'null'); // const initialValueBool = initialValue\n\n  const [checked, setChecked] = React.useState(initialValue);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [page, setPage] = React.useState(0);\n  useEffect(() => {\n    window.localStorage.setItem('checked', JSON.stringify(checked));\n  });\n  const classes = useStyles(); // const data =  props.data;\n  // console.log(\"data: \", data)\n\n  const handleChange = event => {\n    setChecked(JSON.stringify(event.target.checked));\n    console.log(event.target.checked);\n  }; // const handleChecked = (event: React.ChangeEvent<HTMLInputElement>) => {\n  //   if (JSON.stringify(event.target.checked) === 'true' ) {\n  //     return checked\n  //   }\n  // }\n\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const rows = data.items.map(item => createData(item.full_name, item.description));\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n  console.log(data);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  });\n}\n\nexport default RepoTable;","map":{"version":3,"sources":["/home/valynhall/code/flexera-assessment-app/my-app/src/components/RepoTable.tsx"],"names":["React","useEffect","makeStyles","useStyles","table","minWidth","h6","fontSize","createData","full_name","description","RepoTable","props","console","log","initialValue","window","localStorage","getItem","checked","setChecked","useState","rowsPerPage","setRowsPerPage","page","setPage","setItem","JSON","stringify","classes","handleChange","event","target","handleChangePage","newPage","handleChangeRowsPerPage","parseInt","value","rows","data","items","map","item","emptyRows","Math","min","length"],"mappings":";AAAA,OAAOA,KAAP,IAAyBC,SAAzB,QAAyC,OAAzC;AAWA,SAASC,UAAT,QAA2B,0BAA3B;AAGA,MAAMC,SAAS,GAAGD,UAAU,CAAC;AACzBE,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE;AADL,GADkB;AAIzBC,EAAAA,EAAE,EAAC;AACDC,IAAAA,QAAQ,EAAE;AADT;AAJsB,CAAD,CAA5B;;AAiBA,SAASC,UAAT,CAAoBC,SAApB,EAAuCC,WAAvC,EAA4D;AAC1D,SAAO;AAAED,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAAP;AACD;;AAID,SAASC,SAAT,CAAmBC,KAAnB,EAAsC;AAClCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACH,SAAlB;AACA,MAAIM,YAAY,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,aAAa,MAAzC,CAAnB,CAFkC,CAGlC;;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBpB,KAAK,CAACqB,QAAN,CAAeN,YAAf,CAA9B;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCvB,KAAK,CAACqB,QAAN,CAAe,EAAf,CAAtC;AACA,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBzB,KAAK,CAACqB,QAAN,CAAe,CAAf,CAAxB;AAGApB,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,MAAM,CAACC,YAAP,CAAoBS,OAApB,CAA4B,SAA5B,EAAuCC,IAAI,CAACC,SAAL,CAAeT,OAAf,CAAvC;AACD,GAFQ,CAAT;AAGA,QAAMU,OAAO,GAAG1B,SAAS,EAAzB,CAZkC,CAclC;AACA;;AACA,QAAM2B,YAAY,GAAIC,KAAD,IAAgD;AACnEX,IAAAA,UAAU,CAACO,IAAI,CAACC,SAAL,CAAeG,KAAK,CAACC,MAAN,CAAab,OAA5B,CAAD,CAAV;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYiB,KAAK,CAACC,MAAN,CAAab,OAAzB;AACD,GAHD,CAhBkC,CAqBlC;AACA;AACA;AACA;AACA;;;AAEA,QAAMc,gBAAgB,GAAG,CAACF,KAAD,EAAiBG,OAAjB,KAAqC;AAC5DT,IAAAA,OAAO,CAACS,OAAD,CAAP;AACD,GAFD;;AAIA,QAAMC,uBAAuB,GAAIJ,KAAD,IAAgD;AAC9ER,IAAAA,cAAc,CAACa,QAAQ,CAACL,KAAK,CAACC,MAAN,CAAaK,KAAd,EAAqB,EAArB,CAAT,CAAd;AACAZ,IAAAA,OAAO,CAAC,CAAD,CAAP;AACD,GAHD;;AAIA,QAAMa,IAAI,GAAIC,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAgBC,IAAD,IACzBlC,UAAU,CAACkC,IAAI,CAACjC,SAAN,EAAiBiC,IAAI,CAAChC,WAAtB,CADA,CAAd;AAGE,QAAMiC,SAAS,GAAGrB,WAAW,GAAGsB,IAAI,CAACC,GAAL,CAASvB,WAAT,EAAsBgB,IAAI,CAACQ,MAAL,GAActB,IAAI,GAAGF,WAA3C,CAAhC;AACAT,EAAAA,OAAO,CAACC,GAAR,CAAYyB,IAAZ;AACE,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AA6DH;;AAEL,eAAe5B,SAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { create } from 'istanbul-reports';\n\nconst useStyles = makeStyles({\n    table: {\n      minWidth: 650,\n    },\n    h6:{\n      fontSize: 14,\n  \n    }\n  });\n\n  interface IDataProps {\n    data?: any;\n    full_name?: string;\n    avatar_url?: string;\n    description?: string;\n}\n\nfunction createData(full_name: string, description: string) {\n  return { full_name, description };\n}\n\n \n\nfunction RepoTable(props: IDataProps) {\n    console.log(props.full_name)\n    let initialValue = window.localStorage.getItem('checked' || 'null');\n    // const initialValueBool = initialValue\n    const [checked, setChecked] = React.useState(initialValue);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n    const [page, setPage] = React.useState(0);\n   \n  \n    useEffect(() => {\n      window.localStorage.setItem('checked', JSON.stringify(checked))\n    })\n    const classes = useStyles();\n    \n    // const data =  props.data;\n    // console.log(\"data: \", data)\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      setChecked(JSON.stringify(event.target.checked));\n      console.log(event.target.checked)\n    }\n  \n    // const handleChecked = (event: React.ChangeEvent<HTMLInputElement>) => {\n    //   if (JSON.stringify(event.target.checked) === 'true' ) {\n    //     return checked\n    //   }\n    // }\n    \n    const handleChangePage = (event: unknown, newPage: number) => {\n      setPage(newPage);\n    };\n  \n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n      setRowsPerPage(parseInt(event.target.value, 10));\n      setPage(0);\n    };\n    const rows =  data.items.map((item: any) => (\n        createData(item.full_name, item.description)\n      ))\n      const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n      console.log(data)\n        return (\n            <div>\n            {/* <Typography variant=\"h4\">Repo Picker</Typography>\n    \n            <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                <TableCell align=\"left\">Avatar</TableCell>\n                  <TableCell align=\"left\">Name</TableCell>\n                  <TableCell align=\"left\">Description</TableCell>\n                  <TableCell align=\"left\">Flag Me</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row: any) => (\n                  <TableRow key={row.full_name}>\n                    <TableCell component=\"th\" scope=\"row\">\n                    <Typography className={classes.h6} variant=\"h6\" component=\"span\">\n                      {row.full_name}\n                      </Typography>\n                    </TableCell>\n                  \n                    <TableCell component=\"th\" scope=\"row\">\n                    <Typography className={classes.h6} variant=\"h6\" component=\"span\">\n                      {row.full_name}\n                      </Typography>\n                    </TableCell>\n                    \n                    <TableCell align=\"left\">\n                      <Typography className={classes.h6} variant=\"h6\" component=\"span\">\n                        {row.description}\n                        </Typography>\n                        </TableCell>\n                    <Checkbox\n                      key={row.full_name}\n                      //  checked={handleChecked}\n                      onChange={handleChange}\n                      inputProps={{ 'aria-label': 'primary checkbox' }}\n                    />\n                  </TableRow>\n                ))}\n                {emptyRows > 0 && (\n                <TableRow style={{ height: 48 * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <TablePagination\n              rowsPerPageOptions={[10]}\n              component=\"div\"\n              count={rows.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n            /> */}\n          </div> \n    )\n    }\n\nexport default RepoTable;"]},"metadata":{},"sourceType":"module"}